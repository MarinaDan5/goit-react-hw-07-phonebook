{"version":3,"sources":["redux/contacts-actions.js","redux/contacts-reducer.js","redux/store.js","components/Form/Form.js","redux/contacts-selectors.js","components/Filter/Filter.js","components/Contacts/Contacts.js","App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","delContacts","filterContacts","items","createReducer","actions","state","map","item","includes","alert","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","connect","dispatch","onSubmit","contactsActions","useState","setName","setNumber","handleChange","e","currentTarget","value","reset","className","preventDefault","type","pattern","title","onChange","required","getFilter","allContacts","getContacts","contact","toLocaleLowerCase","Filter","useSelector","useDispatch","Contacts","console","log","onClick","onDelete","App","ReactDOM","render","StrictMode","loading","document","querySelector"],"mappings":"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","file":"static/js/main.7369d54b.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/ADD', ({ name, number }) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nconst delContacts = createAction('contacts/DELETE');\r\nconst filterContacts = createAction('contacts/FILTER');\r\n\r\nexport default { addContact, delContacts, filterContacts };\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n// const delContacts = id => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n// const filterContacts = value => ({\r\n//   type: types.FILTER,\r\n//   payload: value,\r\n// });\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    let namesArray = state.map(item => item.name);\r\n    if (!namesArray.includes(payload.name)) {\r\n      return [...state, payload];\r\n    } else {\r\n      alert(`${payload.name} is already in contacts!`);\r\n      return state;\r\n    }\r\n  },\r\n  [actions.delContacts]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\nconst filter = createReducer('', {\r\n  [actions.filterContacts]: (_, { payload }) => payload,\r\n});\r\nexport default combineReducers({ items, filter });\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       let namesArray = state.map(item => item.name);\r\n//       if (!namesArray.includes(payload.name)) {\r\n//         return [...state, payload];\r\n//       } else {\r\n//         alert(`${payload.name} is already in contacts!`);\r\n//         return state;\r\n//       }\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case [actions.filterContacts]:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\nconst store = configureStore({\r\n  reducer: { contacts: persistReducer(persistConfig, contactsReducer) },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts-actions';\r\n\r\nexport function Form({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <label>\r\n        <p className=\"form__lable\">Name </p>\r\n        <input\r\n          className=\"form__input\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </label>\r\n      <label className=\"form__lable\">\r\n        <p className=\"form__lable\"> Number</p>\r\n        <input\r\n          className=\"form__input\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\" className=\"button\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(contactsActions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const filterContacts = state => {\r\n  const allContacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\r\n  );\r\n};\r\n","import contactsActions from '../../redux/contacts-actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts-selectors';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <p className=\"title-text\">Find contacts by name</p>\r\n      <input\r\n        className=\"form__input\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={e =>\r\n          dispatch(contactsActions.filterContacts(e.currentTarget.value))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n// const mapStateToPrors = state => ({ value: state.contacts.filter });\r\n// const mapDispatchToPrors = dispatch => ({\r\n//   onChange: e =>\r\n//     dispatch(contactsActions.filterContacts(e.currentTarget.value)),\r\n// });\r\n\r\n// export default connect(mapStateToPrors, mapDispatchToPrors)(Filter);\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { filterContacts } from '../../redux/contacts-selectors';\r\n\r\nimport contactsActions from '../../redux/contacts-actions';\r\n\r\nexport default function Contacts() {\r\n  // const contacts = useSelector(state =>\r\n  //   filterContacts(state.contacts.items, state.contacts.filter),\r\n  // );\r\n\r\n  const contacts = useSelector(filterContacts);\r\n  const dispatch = useDispatch();\r\n  const onDelete = id => dispatch(contactsActions.delContacts(id));\r\n\r\n  console.log(contacts);\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li className=\"contact-list__item\" key={id}>\r\n            <p>{name}</p>\r\n            <p>{number}</p>\r\n            <button className=\"button\" id={id} onClick={() => onDelete(id)}>\r\n              Delete contact\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n// const filterContacts = (allContacts, filter) => {\r\n//   return allContacts.filter(contact =>\r\n//     contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\r\n//   );\r\n// };\r\n\r\n// const mapStateToPrors = ({ contacts: { items, filter } }) => ({\r\n//   contacts: filterContacts(items, filter),\r\n// });\r\n\r\n// const mapDispatchToPrors = dispatch => ({\r\n//   onDelete: id => dispatch(contactsActions.delContacts(id)),\r\n// });\r\n\r\n// export default connect(mapStateToPrors, mapDispatchToPrors)(Contacts);\r\n","import { useState, useEffect } from 'react';\n\nimport Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter';\nimport Contacts from './components/Contacts/Contacts';\nimport './components/Form/Form.css';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nconst useLocalStorage = (key, defaultContacts) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? [];\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport default function App() {\n  // const [contacts, setContacts] = useLocalStorage('contacts', []);\n  // const [filter, setFilter] = useState('');\n\n  // const deleteContact = e => {\n  //   setContacts(contacts.filter(({ id }) => id !== e.target.id));\n  // };\n\n  // const filterContacts = () => {\n  //   return contacts.filter(({ name }) =>\n  //     name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\n  //   );\n  // };\n  // const changeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // };\n\n  // const addContact = ({ name, number }) => {\n  //   const newContact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   if (contacts.some(contact => contact.name.includes(name))) {\n  //     alert(`${name} is already in contacts!`);\n  //   } else {\n  //     setContacts([newContact, ...contacts]);\n  //   }\n  // };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Phonebook</h1>\n      <Form />\n      <h2 className=\"title\">Contacts</h2>\n      <Filter />\n      <Contacts />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}