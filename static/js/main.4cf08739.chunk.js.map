{"version":3,"sources":["redux/contacts-actions.js","redux/contacts-reducer.js","redux/store.js","redux/contact-operations.js","components/Form/Form.js","redux/contacts-selectors.js","components/Filter/Filter.js","components/Contacts/Contacts.js","App.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","delContactRequest","delContactSuccess","delContactError","filterContacts","items","createReducer","_","payload","state","map","item","name","includes","alert","filter","id","loading","combineReducers","store","configureStore","reducer","contacts","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","axiosInstance","axios","create","baseURL","number","dispatch","post","then","data","catch","error","contactsId","delete","console","log","get","connect","handleGetContacts","contactOperations","useState","setName","setNumber","useDispatch","handleChange","e","currentTarget","value","reset","className","onSubmit","preventDefault","type","pattern","title","onChange","required","onClick","getFilter","createSelector","toLowerCase","Filter","useSelector","contactsActions","fetchContacts","contactsOperations","useEffect","onDelete","App","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.4cf08739.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst asyncGetContacts = createAction('contacts/get');\r\nexport default {asyncGetContacts}\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const delContactRequest = createAction('contacts/delContactRequest');\r\nexport const delContactSuccess = createAction('contacts/delContactSuccess');\r\nexport const delContactError = createAction('contacts/delContactError');\r\n\r\n\r\n\r\n// const addContacts = () => {\r\n//   return axios.post('/contacts', contact).then(({ data }) => data);\r\n// };\r\n\r\n// const deleteContacts = contactsId => {\r\n//   return axios.delete(`contacts/${contactsId}`);\r\n// };\r\n\r\n// const updateContacts = (contactsId, update) => {\r\n//   return axios.patch(`contacts/${contactsId}`, update).then(({ data }) => data);\r\n// };\r\n\r\nexport const delContacts = createAction('contacts/DELETE');\r\nexport const filterContacts = createAction('contacts/FILTER');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  delContactRequest,\r\n  delContactSuccess,\r\n  delContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  filterContacts,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    let namesArray = state.map(item => item.name);\r\n    if (!namesArray.includes(payload.name)) {\r\n      return [...state, payload];\r\n    } else {\r\n      alert(`${payload.name} is already in contacts!`);\r\n      return state;\r\n    }\r\n  },\r\n  [delContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n\r\n  [delContactRequest]: () => true,\r\n  [delContactSuccess]: () => false,\r\n  [delContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\nimport contactsReducer from './contacts-reducer';\r\n\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }),\r\n//   logger,\r\n// ];\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReducer },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },}).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  delContactRequest,\r\n  delContactSuccess,\r\n  delContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\n\r\n\r\n// axios.default.baseURL = 'https://6191605e41928b001769003f.mockapi.io';\r\nconst axiosInstance =  axios.create({\r\n  baseURL:'https://6191605e41928b001769003f.mockapi.io'\r\n})\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  console.log('fetchContacts')\r\n  dispatch(fetchContactRequest());\r\n\r\n  axiosInstance.get('/contacts')\r\n    .then(({ data }) => {\r\n        console.log('data',data)\r\n      // dispatch(fetchContactSuccess(data))\r\n      dispatch(fetchContactSuccess(data.items))\r\n    })\r\n    .catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contacts = { name, number };\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contacts)\r\n    .then(({ data }) =>\r\n      dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst delContacts = contactsId => dispatch => {\r\n  dispatch(delContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactsId}`)\r\n    .then(() => dispatch(delContactSuccess(contactsId)))\r\n    .catch(error => dispatch(delContactError(error)));\r\n};\r\nexport default { addContact, delContacts, fetchContacts };\r\n","import { useState } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport contactOperations from '../../redux/contact-operations';\r\nimport logger from 'redux-logger';\r\n\r\nfunction Form() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const onSubmit = (name, number) =>\r\n    dispatch(contactOperations.addContact(name, number));\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const handleGetContacts = () => {\r\n    console.log('handleGetContacts');\r\n    dispatch(contactOperations.fetchContacts());\r\n  }\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <label>\r\n          <p className=\"form__lable\">Name </p>\r\n          <input\r\n            className=\"form__input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label className=\"form__lable\">\r\n          <p className=\"form__lable\"> Number</p>\r\n          <input\r\n            className=\"form__input\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className=\"button\">\r\n          Add contact\r\n        </button>\r\n\r\n      </form>\r\n      <button type=\"submit\" className=\"button\" onClick={handleGetContacts}>\r\n        fetch contacts\r\n      </button>\r\n    </>\r\n\r\n  );\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  handleGetContacts: () => dispatch(contactOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const filterContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (items, filter) => {\r\n    return items.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\n// export const filterContacts = state => {\r\n//   const allContacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   return allContacts.filter(contact =>\r\n//     contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\r\n//   );\r\n// };\r\n","import * as contactsActions from '../../redux/contacts-actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts-selectors';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <p className=\"title-text\">Find contacts by name</p>\r\n      <input\r\n        className=\"form__input\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={e =>\r\n          dispatch(contactsActions.filterContacts(e.currentTarget.value))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch, connect } from 'react-redux';\r\n// import { filterContacts } from '../../redux/contacts-selectors';\r\n\r\nimport contactsOperations from '../../redux/contact-operations';\r\n\r\nfunction Contacts() {\r\n  const contacts = useSelector(state => state.contacts.items);\r\n  const dispatch = useDispatch();\r\n  const onDelete = id => dispatch(contactsOperations.delContacts(id));\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li className=\"contact-list__item\" key={id}>\r\n            <p>{name}</p>\r\n            <p>{number}</p>\r\n            <button className=\"button\" id={id} onClick={() => onDelete(id)}>\r\n              Delete contact\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\nexport default connect(null, mapDispatchToProps)(Contacts);\r\n","import Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter';\nimport Contacts from './components/Contacts/Contacts';\nimport './components/Form/Form.css';\n\nexport default function App() {\n  // const [contacts, setContacts] = useLocalStorage('contacts', []);\n  // const [filter, setFilter] = useState('');\n\n  // const deleteContact = e => {\n  //   setContacts(contacts.filter(({ id }) => id !== e.target.id));\n  // };\n\n  // const filterContacts = () => {\n  //   return contacts.filter(({ name }) =>\n  //     name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()),\n  //   );\n  // };\n  // const changeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // };\n\n  // const addContact = ({ name, number }) => {\n  //   const newContact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   if (contacts.some(contact => contact.name.includes(name))) {\n  //     alert(`${name} is already in contacts!`);\n  //   } else {\n  //     setContacts([newContact, ...contacts]);\n  //   }\n  // };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Phonebook</h1>\n      <Form />\n      <h2 className=\"title\">Contacts</h2>\n      <Filter />\n      <Contacts />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}